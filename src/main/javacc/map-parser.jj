options {
  STATIC = false ;
}


PARSER_BEGIN( MappingParser )
package esl.cuenet.mapper.parser;

import esl.cuenet.mapper.tree.IParseTree;
import esl.cuenet.mapper.tree.IParseTreeCreator;

public class MappingParser {
  IParseTreeCreator creator;
  public void setIParseTreeCreator(IParseTreeCreator creator) {
    this.creator = creator;
  }

  public IParseTreeCreator getIParseTreeCreator() {
    return this.creator;
  }

}
PARSER_END( MappingParser )


IParseTree parse_document() : {} { (sexpr())* <EOF> { creator.eof(); return creator.getTree(); } }


void sexpr() : {}  { start_s_expr() operator() (operand())+ end_s_expr() }


void start_s_expr(): {Token t;}    { t=<START_S_EXPR> {creator.startSExpression();} }

void end_s_expr() : {Token t;}    { t=<END_S_EXPR> {creator.endSExpression();} }


void operator(): {Token operator;} { operator = <OPERATOR_NAME> { {creator.addOperator(operator.image);} } }

void operand(): {Token t=null;} { (t=<OPERAND_NAME> | sexpr()) { if (t!=null) creator.addOperand(t.image); } }


SKIP    : {  <"//" (~["\n"])* "\n"> }
SKIP 	: { " " | "\t" | "\n" | "\r" }
TOKEN   : { < START_S_EXPR : "(" > }
TOKEN   : { < END_S_EXPR : ")" > }
TOKEN   : { <OPERATOR_NAME : ":" (["a" - "z"]|["A" - "Z"])+ > }
TOKEN   : { <OPERAND_NAME  : (["a" - "z"]|["A" - "Z"]| ["0"-"9"] | "\"" | "-" | "_" | "/" | "@" | ":" | "." | "]" | "[")+ > }
