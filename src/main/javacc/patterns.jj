options {
  STATIC = false;
}

PARSER_BEGIN( ModelPatternParser )
package esl.cuenet.model.pattern.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.StringReader;

public class ModelPatternParser {

    public ModelPatternParser(String s)
    {
        this((new StringReader(s)));
    }

    public static void main(String args[]) throws Exception
    {
        BufferedReader reader = new BufferedReader(new FileReader("src/main/javacc/test/patterntests.txt"));
        String line;

        while (true) {
            line = reader.readLine();
            if (line == null) break;

            System.out.println("\nPATTERN : " + line);
            ModelPatternParser parser = new ModelPatternParser(line);

            try {
                parser.parse();
            } catch (ParseException p) {
                System.out.println("ERROR: " + p.getMessage());
            }
        }
    }
}

PARSER_END( ModelPatternParser )

void parse() :
{}
{
    (superEventSpec())+   <EOF>       // a query followed by optional sort
}

void qclass() :
{
    Token t, q=null;
}
{
    t=<OCLASS> (q=<QUANTIFIER>)? { System.out.println("qclass = " + t.toString() + " " + ((q==null)?"":q.toString()));}
}

void superEventSpec() :
{ Token o, p; }
{
    ( <LEFTBRACK> o=<OCLASS> {System.out.println("oclass = " + o);} <SECONTAINS> pattern() <RIGHTBRACK> )
}

void pattern():
{}
{
  ( <LEFTPAREN> (atom() (delimiter() atom())*)+ <RIGHTPAREN>)
}

void atom():
{}
{
  (qclass() | superEventSpec())
}

void delimiter():
{}
{
  <INTERLEAVED> | <FOLLOWEDBY>
}

SKIP    : {  <"//" (~["\n"])* "\n"> }
SKIP 	: { " " | "\t" | "\n" | "\r" }

TOKEN : { <STRING : (["A"-"Z", "0"-"9"])+ > }
TOKEN : { <QUOTED_STRING: "\"" (~["\""])+ "\"" > }
TOKEN : { <OCLASS  : (["a" - "z"]|["A" - "Z"]| ["0"-"9"] | "\"" | "-" | "_" | "#" | "/" | "@" | "." | "]" | "[")+ > }
TOKEN : { <QUANTIFIER  : "*" | "+" | "?" | "*_T" | "*_S" | "+_T" | "+_S" > }

TOKEN : { <LEFTPAREN : "(" > }
TOKEN : { <RIGHTPAREN : ")" > }

TOKEN : { <LEFTBRACK : "{" > }
TOKEN : { <RIGHTBRACK : "}" > }

TOKEN : { <FOLLOWEDBY  : "->" > }
TOKEN : { <INTERLEAVED : "," > }
TOKEN : { <SECONTAINS  : ":" > }