options {
  STATIC = false;
  LOOKAHEAD = 300;
}

PARSER_BEGIN( ModelPatternParser )
package esl.cuenet.query.pattern.parser;

import esl.cuenet.query.pattern.graph.PatternGraphConstructor;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.StringReader;

public class ModelPatternParser {

    public ModelPatternParser(String s)
    {
        this((new StringReader(s)));
    }

    public static void main(String args[]) throws Exception
    {
        String filename = "src/main/javacc/test/patterntests.2.txt";
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        String line;

        while (true) {
            line = reader.readLine();
            if (line == null) break;
            if (line.length() < 1) continue;

            System.out.println("\u005cnPATTERN : " + line);

            PatternGraphConstructor constructor = new PatternGraphConstructor();
            ModelPatternParser parser = new ModelPatternParser(line);

            try {
                parser.parse(constructor);
            } catch (Exception p) {
                System.out.println("EXCEPT: " + p.getMessage());
            } catch (Error r) {
                System.out.println("ERROR: " + r.getMessage());
            }
        }

        System.out.println("\nRan Tests from " + filename);
    }
}

PARSER_END( ModelPatternParser )

void parse(PatternGraphConstructor constructor):
{}
{
    (pattern(constructor)) <EOF> {constructor.stop();}
}

void pattern(PatternGraphConstructor constructor):
{}
{
    superEventSpec(constructor) | followsSequence(constructor)
}

void superEventSpec(PatternGraphConstructor constructor):
{Token o;}
{
    <LEFTPAREN> o=<OCLASS>
    {
        //System.out.println("se = " + o.image);
        constructor.startSubEventPattern(o.image);
    }
    <SECONTAINS> followsSequence(constructor) <RIGHTPAREN>
    {
        //System.out.println("se end");
        constructor.endSubEventPattern();
    }
}

void followsSequence(PatternGraphConstructor constructor):
{}
{
    <LEFTPAREN> term(constructor) ( <FOLLOWEDBY> term(constructor) )* <RIGHTPAREN>
}

void term(PatternGraphConstructor constructor):
{ Token o; }
{
    interleaved(constructor) |
    union(constructor) |
    (o=<OCLASS>
    {
        //System.out.println("term = " + o.image);
        constructor.add(o.image);
    }) |
    (superEventSpec(constructor))
}

void interleaved(PatternGraphConstructor constructor):
{ Token o; }
{
    <LEFTPAREN>
    {
        //System.out.println("Starting Interleaved");
        constructor.startInterleaved();
    }
    (
        (o=<OCLASS>
        {
            //System.out.println("OCLASS in Interleaved path: " + o.image);
            constructor.add(o.image);
        }) |
        pattern(constructor)
    )
    (<QUANTIFIER>)?
    ( <INTERLEAVED>
        {
            //System.out.println("Interleave Op");
            constructor.switchInterleavePath();
        }
        (
            (o=<OCLASS>
            {
                //System.out.println("OCLASS in Interleaved path: " + o.image);
                constructor.add(o.image);
            }) |
            pattern(constructor)) (<QUANTIFIER>)?
    )*
    <RIGHTPAREN>
    {
        //System.out.println("Ending Interleaved");
        constructor.endInterleaved();
    }
}

void union(PatternGraphConstructor constructor):
{ Token o; }
{
    <LEFTPAREN>
    {
        //System.out.println("Starting Union");
        constructor.startUnion();
    }
    (
        (o=<OCLASS>
        {
            //System.out.println("OCLASS in Union path: " + o.image);
            constructor.add(o.image);
        }) |
    pattern(constructor))
    (<QUANTIFIER>)?
    ( <UNION>
        {
            //System.out.println("Union Op");
            constructor.switchUnionPath();
        }
        (
            (o=<OCLASS>
            {
                //System.out.println("OCLASS in Union path: " + o.image);
                constructor.add(o.image);
            }) |
            pattern(constructor)) (<QUANTIFIER>)?
    )*
    <RIGHTPAREN>
    {
        //System.out.println("Ending Union");
        constructor.endUnion();
    }
}

SKIP    : {  <"//" (~["\n"])* "\n"> }
SKIP 	: { " " | "\t" | "\n" | "\r" }

TOKEN : { <STRING : (["A"-"Z", "0"-"9"])+ > }
TOKEN : { <QUOTED_STRING: "\"" (~["\""])+ "\"" > }
TOKEN : { <OCLASS  : (["a" - "z"]|["A" - "Z"]| ["0"-"9"] | "\"" | "-" | "_" | "#" | "/" | "@" | "." | "]" | "[")+ > }
TOKEN : { <QUANTIFIER  : "*" | "+" | "?" | "*_T" | "*_S" | "+_T" | "+_S" > }

TOKEN : { <LEFTPAREN : "(" > }
TOKEN : { <RIGHTPAREN : ")" > }

TOKEN : { <UNION : "|" > }
TOKEN : { <FOLLOWEDBY  : "->" > }
TOKEN : { <INTERLEAVED : "," > }
TOKEN : { <SECONTAINS  : ":" > }

TOKEN : { <LEFTCURLY : "{" > }
TOKEN : { <RIGHTCURLY : "}" > }
